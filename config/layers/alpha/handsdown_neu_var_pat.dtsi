/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

/* = ⇧ =   34 Keys - Hands Down neu - variante Pat
    ╭──────────────────╮ ╭───────────────╮
    │ W  F  M  P  V    │ │ /  .  J  '  Z │
    │ R  S  N  T  B    │ │ ,  E  A  I  H │
    │ X  C  L  D  G    │ │ -  U  O  Y  K │
    ╰────────╮ ⇧ CapsW │ │⌫ -L1- ╭──────╯
             ╰─────────╯ ╰────────╯         */
/*     Chorded Letters - 34 Keys - Hands Down neu - variante Pat
    ╭──────────────╮ ╭─────────────────╮
    │ Qu           │ │                 │
    │ / \          │ │                 │
    │ W  F  _  _  _│ │_  _     _  _  _ │
    │ _  _  _  _  _│ │_  E -Ä- A  _  _ │
    │              │ │   │ \           │
    │              │ │   Ü  Ö          │
    │              │ │   │    \        │
    │ _  _  _  _  _│ │_  U     O  _  _ │
    ╰────────╮ _  _│ │_  _ ╭───────────╯
             ╰─────╯ ╰─────╯         
*/   
 
// LEFT SIDE
// TOP 
#define P_W LTP
#define P_F LTR
#define P_M LTM
#define P_P LTII
#define P_V LTIO
// MIDDLE
#define P_R LMP
#define P_S LMR
#define P_N LMM
#define P_T LMII
#define P_B LMIO
// BOTTOM
#define P_X LBP
#define P_C LBR
#define P_L LBM
#define P_D LBII
#define P_G LBIO
// THUMB
#define P_REP LTI
#define P_SPACE LTO

// RIGHT SIDE
// TOP 
#define P_SLASH RTIO
#define P_DOT RTII
#define P_J RTM
#define P_GRAVE RTR
#define P_Z RTP
// MIDDLE
#define P_COMMA RMIO
#define P_A RMII
#define P_E RMM
#define P_I RMR
#define P_H RMP
// BOTTOM
#define P_MINUS RBIO
#define P_U RBII
#define P_O RBM
#define P_Y RBR
#define P_K RBP
// THUMB
#define P_BACKSPACE RTO
#define P_RETURN RTI

&caps_word {
   continue-list = <UNDERSCORE MINUS BACKSPACE>;
};
/*           34 Keys
 ╭──────────────╮ ╭──────────────╮
 │ 0  1  2  3  4│ │ 5  6  7  8  9│
 │10 11 12 13 14│ │15 16 17 18 19│
 │20 21 22 23 24│ │25 26 27 28 29│
 ╰────────╮30 31│ │32 33╭────────╯
          ╰─────╯ ╰─────╯         */
/*    34 Keys - Hands Down neu
 https://sites.google.com/alanreiser.com/handsdown/home/hands-down-neu?authuser=0
 ╭───────────────╮ ╭─────────────────╮
 │ w  f  m  p  v │ │ /  .  q  "  '  z│
 │ r  s  n  t  b │ │ ,  a  e  i  h  j│
 │ x  c  l  d  g │ │ -  u  o  y  k   │     
 ╰─────────╮,; .:│ │ ␣  ⏎╭───────────╯
           ╰─────╯ ╰─────╯         
*/
/ {
/*     34 Keys - Hands Down neu - variante Pat
 ╭────────────────╮ ╭───────────────╮
 │ w  f  m  p  v  │ │ /  .  j  '  z │
 │ r  s  n  t  b  │ │ ,  a  e  i  h │
 │ x  c  l  d  g  │ │ -  u  o  y  k │
 ╰────────╮ ⇧ REP │ │ ␣ -L0- ╭──────╯
          ╰───────╯ ╰────────╯         
*/
/* = ⇧ =   34 Keys - Hands Down neu - variante Pat
    ╭──────────────────╮ ╭───────────────╮
    │ W  F  M  P  V    │ │ │  :  J  "  Z │
    │ R  S  N  T  B    │ │ ;  A  E  I  H │
    │ X  C  L  D  G    │ │ _  U  O  Y  K │
    ╰────────╮SYM ⌫/NUM│ │␣/⏎  REP╭──────╯
             ╰─────────╯ ╰────────╯         */
/*     Chorded Letters - 34 Keys - Hands Down neu - variante Pat
    ╭──────────────╮ ╭─────────────────╮
    │ Qu           │ │                 │
    │ / \          │ │                 │
    │ W  F  _  _  _│ │_  _     _  _  _ │
    │ _  _  _  _  _│ │_  A -Ä- E  _  _ │
    │              │ │        /│       │
    │              │ │      Ü  Ö       │
    │              │ │     /   │       │
    │ _  _  _  _  _│ │_  U     O  _  _ │
    ╰────────╮ _  _│ │_  _ ╭───────────╯
             ╰─────╯ ╰─────╯         
*/   
      // combos {
      //    compatible = "zmk,combos";
         // COMBO(tab, &kp TAB, TLR TLM)
         // COMBO(shift, &skq LSHFT, TRM TRR)
         // COMBO(ctrl, &sk LCTL, BLR BLM)
         // COMBO(backspace, &kp BSPC, BRM BRR)
         // COMBO(COM, &sk LCOM, LTI LTO)
         // COMBO(opt, &sk LALT, RTO RTI)
         //COMBO(z, &kp Z, MLP MLM)
      // };
      keymap {
         compatible = "zmk,keymap";
         hands_down_neu {
            bindings = <
//╭──────────────┬───────────────┬──────────────┬──────────────┬───────────────╮╭─────────────────────────┬────────────────┬──────────────┬───────────────┬───────────────╮
   &kp W           &kp F           &kp M          &kp P          &kp V           &mm_s_slh_pipe             &mm_s_dot_colon  &kp J          &mm_s_quotes    &kp Z
//├──────────────┼───────────────┼──────────────┼──────────────┼───────────────┤├─────────────────────────┼────────────────┼──────────────┼───────────────┼───────────────┤
   &hrm_l GLOBE R  &hrm_l LCTRL S  &hrm_l LALT N  &hrm_l LCMD T  &hrm_l LSHFT B  &hrm_r_comma_semi RSHFT 0  &hrm_r RCMD A    &hrm_r RALT E  &hrm_r RCTRL I  &hrm_r GLOBE H
// alternative HRM with RTI pressed
//   &mm_hrm_R  &mm_hrm_S  &mm_hrm_N  &mm_hrm_T  &kp B  &mm_s_comma_semi   &mm_hrm_A          &mm_hrm_E  &mm_hrm_I       &mm_hrm_H
//├──────────────┼───────────────┼──────────────┼──────────────┼───────────────┤├─────────────────────────┼────────────────┼──────────────┼───────────────┼───────────────┤
   &kp X           &kp C           &kp L          &kp D          &kp G           &mm_s_minus_under          &kp U            &kp O          &kp Y           &kp K
//╰──────────────┴───────────────┴─────────────╮                               ││                                          ╭──────────────┴───────────────┴───────────────╯
                                                &ht_lt_NUM_rep 0  &ht_lt_SYM SPACE  &ht_lt_CRD BACKSPACE          &ht_lt_CMD RETURN
                                                // alternative HRM with RTI pressed
                                               // &mm_hrm_SYM_return  &mm_hrm_NUM_bsp  &mt RSHIFT SPACE   &ht_mo_rep COM 0
//                                             ╰───────────────┴───────────────╯╰─────────────────────────┴────────────────╯
            >;
         };
      };
   };
   
   // thumb keys
   HOLD_TAP_BEHAVIORS(lt_NUM_rep, &ls_mo_NUM, &key_repeat)
   HOLD_TAP_BEHAVIORS(lt_CMD, &ls_mo_CMD, &kp)

   HOLD_TAP_BEHAVIORS(lt_SYM, &ls_mo_SYM, &kp)
   HOLD_TAP_BEHAVIORS(lt_CRD, &ls_mo_CRD, &kp)



   /* alternative: RTI as mod key to activate HRMs
   MOD_MORPH_HRM(R, &kp R, &kp LSHIFT)
   MOD_MORPH_HRM(S, &kp S, &kp LCTRL)
   MOD_MORPH_HRM(N, &kp N, &kp LALT)
   MOD_MORPH_HRM(T, &kp T, &kp LCMD)
   MOD_MORPH_HRM(B, &kp B, &kp GLOBE)
   
   MOD_MORPH_HRM(A, &kp A, &kp RCMD)
   MOD_MORPH_HRM(E, &kp E, &kp RALT)
   MOD_MORPH_HRM(I, &kp I, &kp RCTRL)
   MOD_MORPH_HRM(H, &kp H, &kp LSHIFT)
*/

   // Combo keys
   CHORD_LAYER(QU, &kp Q &kp U, LTP LTR, ALP)
   COMBO_LONG(capsword, &caps_word, LMIO RMIO)
   COMBO_LAYER(CapsW_left_shift, &caps_word, LTO LMIO, ALP)
   COMBO_LAYER(CapsW_right_shift, &caps_word, LTO RMIO, ALP)
//  done on the chord layer instead, so BSPC can be hold instead of pressed together
//   COMBO_LAYER(DelW, &kp LA(BACKSPACE), LTO RTO, ALP SYM NUM CMD)

   // Sentence ending auto capitalize
   MACRO(dot, &kp DOT &kp SPACE &skl LSHIFT)
   MOD_MORPH(dot, &macro_dot, &kp DOT, MOD_LALT|MOD_RALT)

   MACRO(comma, &kp COMMA &kp SPACE)
   MOD_MORPH(comma, &macro_comma, &kp COMMA, MOD_LALT|MOD_RALT)

   // shift
   MOD_MORPH_SHIFT(slh_pipe, &kp SLASH, &kp PIPE)
   MOD_MORPH_SHIFT(dot_colon, &mm_dot, &kp COLON)
   MOD_MORPH_SHIFT(quotes, &kp SQT, &kp DQT)
   MOD_MORPH_SHIFT(comma_semi, &mm_comma, &kp SEMICOLON)
   HOME_ROW_MOD_BEHAVIOR(r_comma_semi, &mm_s_comma_semi, LEFT_SIDE_KEYS)

   MOD_MORPH_SHIFT(minus_under, &kp MINUS, &kp UNDERSCORE)

   // Umlaute
   MACRO(ae, &kp LA(U) &kp A)
   MACRO(shift_ae, &kp LA(U) &kp LS(A))
   CHORD_LAYER(ae, &macro_ae, P_A P_E, ALP)
   MOD_MORPH_SHIFT(ae, &macro_ae, &macro_shift_ae)

   MACRO(oe, &kp LA(U) &kp O)
   MACRO(shift_oe, &kp LA(U) &kp LS(O))
   CHORD_LAYER(oe, &macro_oe, P_O P_E, ALP)
   MOD_MORPH_SHIFT(oe, &macro_oe, &macro_shift_oe)

   MACRO(ue, &kp LA(U) &kp U)
   MACRO(shift_ue, &kp LA(U) &kp LS(U))
   CHORD_LAYER(ue, &macro_ue, P_U P_E, ALP)
   MOD_MORPH_SHIFT(ue, &macro_ue, &macro_shift_ue)

   //ß
   CHORD_LAYER(ss, &kp LA(S), P_S P_E, ALP)


